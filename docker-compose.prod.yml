version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=rss_user
      - DB_PASSWORD=${DB_PASSWORD:-rss_password}
      - DB_NAME=rss_comb
      - FEEDS_DIR=/app/feeds
      - WORKER_COUNT=${WORKER_COUNT:-5}
      - SCHEDULER_INTERVAL=${SCHEDULER_INTERVAL:-30}
      - API_ACCESS_KEY=${API_ACCESS_KEY}
      - GIN_MODE=release
    volumes:
      - ./feeds:/app/feeds:ro
      - app_logs:/app/logs
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rss-comb-network

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=rss_comb
      - POSTGRES_USER=rss_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-rss_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rss_user -d rss_comb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rss-comb-network
    ports:
      - "127.0.0.1:5432:5432" # Only bind to localhost for security

  # Optional: Database migration runner
  migrations:
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=rss_user
      - DB_PASSWORD=${DB_PASSWORD:-rss_password}
      - DB_NAME=rss_comb
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        until nc -z db 5432; do
          echo 'Database not ready, waiting...'
          sleep 2
        done &&
        echo 'Database port is open, waiting for PostgreSQL to be ready...' &&
        sleep 10 &&
        echo 'Running migrations...' &&
        /usr/local/bin/migrate -path ./migrations -database 'postgres://rss_user:${DB_PASSWORD:-rss_password}@db:5432/rss_comb?sslmode=disable' up &&
        echo 'Migrations completed successfully'
      "
    networks:
      - rss-comb-network
    restart: "no"

networks:
  rss-comb-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  postgres_logs:
    driver: local